<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-05-16T00:53:48+09:00</updated><id>http://localhost:4000/</id><title type="html">Laon Dreams • Simple, blog-aware, static sites</title><subtitle>Dreams come true!</subtitle><entry><title type="html">Using coroutines</title><link href="http://localhost:4000/news/2018/05/15/kotlinlang-experimental-coroutines/" rel="alternate" type="text/html" title="Using coroutines" /><published>2018-05-15T11:51:52+09:00</published><updated>2018-05-15T11:51:52+09:00</updated><id>http://localhost:4000/news/2018/05/15/kotlinlang-experimental-coroutines</id><content type="html" xml:base="http://localhost:4000/news/2018/05/15/kotlinlang-experimental-coroutines/">&lt;h1 id=&quot;using-coroutines&quot;&gt;Using coroutines&lt;/h1&gt;

&lt;p&gt;With all the benefits that they bring, Kotlin coroutines are a fairly new design that needs extensive battle-testing before we can be sure it’s 100% right and complete. This is why it is released under an “experimental” opt-in flag. We do not expect the language rules to change and the coroutines are definitely there to stay, but APIs will require some adjustments in the future release.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Command line:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;-Xcoroutines=enable&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gradle:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin { experimental { coroutines 'enable' } }&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Maven:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;configuration&amp;gt; &amp;lt;args&amp;gt; &amp;lt;arg&amp;gt;-Xcoroutines=enable&amp;lt;/arg&amp;gt; &amp;lt;/args&amp;gt; &amp;lt;/configuration&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IDE:&lt;/strong&gt; Use a quick-fix (Alt+Enter) or modify the facet options &lt;em&gt;(Project Structure -&amp;gt; Modules -&amp;gt; Your Module -&amp;gt; Compiler -&amp;gt; Coroutines (experimental))&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="kotlin" /><summary type="html">Using coroutines</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/twitter-card.png" /></entry><entry><title type="html">Creating a Kotlin JavaScript library with the Command Line Compiler</title><link href="http://localhost:4000/news/2018/05/15/kotlinlang-command-line-library-js/" rel="alternate" type="text/html" title="Creating a Kotlin JavaScript library with the Command Line Compiler" /><published>2018-05-15T00:00:00+09:00</published><updated>2018-05-15T00:00:00+09:00</updated><id>http://localhost:4000/news/2018/05/15/kotlinlang-command-line-library-js</id><content type="html" xml:base="http://localhost:4000/news/2018/05/15/kotlinlang-command-line-library-js/">&lt;h3 id=&quot;creating-a-kotlinjavascript-library&quot;&gt;Creating a Kotlin/JavaScript library&lt;/h3&gt;

&lt;p&gt;We will create a simple Kotlin/JavaScript library.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Using our favorite editor, we create a new file called &lt;em&gt;library.kt&lt;/em&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.sample&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forOdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compile the library using the JS compiler&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kotlinc-js -output sample-library.js -meta-info library.kt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-meta-info&lt;/code&gt; option indicates that an additional JS file with binary
meta-information about compiled kotlin code will be created.&lt;/p&gt;

    &lt;p&gt;If you want to see all available options run&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kotlinc-js -help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;After compilation we have two new files:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sample-library.js
sample-library.meta.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can simply distribute two JS files, &lt;code class=&quot;highlighter-rouge&quot;&gt;sample-library.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sample-library.meta.js&lt;/code&gt;.
The former file contains translated JavaScript code, the latter file
contains some meta-information about Kotlin code, which is needed by compiler.&lt;/p&gt;

    &lt;p&gt;Alternatively, you can append the content of &lt;code class=&quot;highlighter-rouge&quot;&gt;sample-library.meta.js&lt;/code&gt; to the end
of &lt;code class=&quot;highlighter-rouge&quot;&gt;sample-library.js&lt;/code&gt; and distribute only the resulting file.&lt;/p&gt;

    &lt;p&gt;Also you can create an archive, which can be distributed as a library:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jar cf sample-library.jar *.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;using-a-kotlinjavascript-library&quot;&gt;Using a Kotlin/JavaScript library.&lt;/h3&gt;

&lt;p&gt;Create binom.kt:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.sample.factorial&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.sample.forOdd&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
        
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oddFactorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1L&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forOdd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Compile with library:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   $ kotlinc-js -output binom.js -libraries sample-library.meta.js binom.kt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both files &lt;code class=&quot;highlighter-rouge&quot;&gt;sample-library.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sample-library.meta.js&lt;/code&gt; should be present in the latter case,
   because translated JavaScript file contains meta-information about inlining, which 
   is needed by compiler.&lt;/p&gt;

&lt;p&gt;If you have an archive &lt;code class=&quot;highlighter-rouge&quot;&gt;sample-library.jar&lt;/code&gt;, which contains &lt;code class=&quot;highlighter-rouge&quot;&gt;sample-library.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sample-library.meta.js&lt;/code&gt;,
   you can use the following command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   $ kotlinc-js -output binom.js -libraries sample-library.jar binom.kt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Creating a Kotlin/JavaScript library</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/twitter-card.png" /></entry><entry><title type="html">Creating a RESTful Web Service with Spring Boot</title><link href="http://localhost:4000/news/2018/05/15/kotlinlang-spring-boot-restful/" rel="alternate" type="text/html" title="Creating a RESTful Web Service with Spring Boot" /><published>2018-05-15T00:00:00+09:00</published><updated>2018-05-15T00:00:00+09:00</updated><id>http://localhost:4000/news/2018/05/15/kotlinlang-spring-boot-restful</id><content type="html" xml:base="http://localhost:4000/news/2018/05/15/kotlinlang-spring-boot-restful/">&lt;p&gt;Kotlin works quite smoothly with Spring Boot and many of the steps found on the &lt;a href=&quot;https://spring.io/guides&quot;&gt;Spring Guides&lt;/a&gt; for creating a RESTful service
can be followed verbatim for Kotlin. There are some minor differences however when it comes to defining the Gradle configuration
and the project layout structure, as well as the initialization code.&lt;/p&gt;

&lt;p&gt;In this tutorial we’ll walk through the steps required. For a more thorough explanation of Spring Boot and RESTful services, please see
&lt;a href=&quot;https://spring.io/guides/gs/rest-service/&quot;&gt;Building a RESTful Web Service&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that all classes in this tutorial are in the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.jetbrains.kotlin.demo&lt;/code&gt; package.&lt;/p&gt;

&lt;h3 id=&quot;defining-the-project-and-dependencies&quot;&gt;Defining the project and dependencies&lt;/h3&gt;

&lt;p&gt;The Gradle file is pretty much standard for Spring Boot. The only differences are the structure layout for source folders for Kotlin, the required Kotlin dependencies and the &lt;a href=&quot;https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugi&quot;&gt;&lt;em&gt;kotlin-spring&lt;/em&gt;&lt;/a&gt; Gradle plugin (CGLIB proxies used for example for &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@Bean&lt;/code&gt; processing require &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; classes).&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;kotlin_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Required for Kotlin integration&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;spring_boot_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.5.4.RELEASE'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Required for Kotlin integration&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'kotlin'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Required for Kotlin integration&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;kotlin-spring&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baseName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'gs-rest-service'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0.1.0'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Required for Kotlin integration&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-web'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testCompile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-test'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-a-greeting-data-class-and-controller&quot;&gt;Creating a Greeting Data Class and Controller&lt;/h3&gt;
&lt;p&gt;The next step is to create Greeting Data class that has two properties: &lt;em&gt;id&lt;/em&gt; and a &lt;em&gt;content&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now define the &lt;em&gt;GreetingController&lt;/em&gt; which serves requests of the form &lt;em&gt;/greeting?name={value}&lt;/em&gt; and returns a JSON object
representing an instance of &lt;em&gt;Greeting&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GreetingController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicLong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/greeting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incrementAndGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, $name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As can be seen, this is again pretty much a one-to-one translation of Java to Kotlin, with nothing special required for Kotlin.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-application-class&quot;&gt;Creating the Application class&lt;/h3&gt;
&lt;p&gt;Finally we need to define an Application class. As Spring Boot looks for a public static main method, we need to define this in Kotlin. It could be done with the &lt;em&gt;@JvmStatic&lt;/em&gt; annotation and a companion object but here we prefer using a &lt;a href=&quot;&quot;&gt;top-level function&lt;/a&gt; defined outside Application class since it leads to more concise and clean code.&lt;/p&gt;

&lt;p&gt;No need to mark the Application class as &lt;em&gt;open&lt;/em&gt; since we are using the &lt;em&gt;kotlin-spring&lt;/em&gt; Gradle plugin which does that automatically.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;running-the-application&quot;&gt;Running the application&lt;/h3&gt;
&lt;p&gt;We can now use the any of the standard Gradle tasks for Spring Boot to run the application. As such, running&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew bootRun
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the application is compiled, resources bundled and launched, allowing us to access is via the browser (default port is 8080)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Running App&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Kotlin works quite smoothly with Spring Boot and many of the steps found on the Spring Guides for creating a RESTful service can be followed verbatim for Kotlin. There are some minor differences however when it comes to defining the Gradle configuration and the project layout structure, as well as the initialization code.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/twitter-card.png" /></entry><entry><title type="html">Getting started with Android and Kotlin</title><link href="http://localhost:4000/news/2018/05/15/kotlinlang-kotlin-android/" rel="alternate" type="text/html" title="Getting started with Android and Kotlin" /><published>2018-05-15T00:00:00+09:00</published><updated>2018-05-15T00:00:00+09:00</updated><id>http://localhost:4000/news/2018/05/15/kotlinlang-kotlin-android</id><content type="html" xml:base="http://localhost:4000/news/2018/05/15/kotlinlang-kotlin-android/">&lt;h3 id=&quot;installing-the-kotlin-plugin&quot;&gt;Installing the Kotlin plugin&lt;/h3&gt;

&lt;p&gt;The Kotlin plugin is bundled with Android Studio starting from &lt;a href=&quot;https://developer.android.com/studio/preview/index.html&quot;&gt;version 3.0&lt;/a&gt;. If you use an earlier version, you’ll need to install the Kotlin plugin.
Go to &lt;em&gt;File | Settings | Plugins | Install JetBrains plugin…&lt;/em&gt; and then search for and install &lt;em&gt;Kotlin&lt;/em&gt;.
If you are looking at the “Welcome to Android Studio” screen, choose &lt;em&gt;Configure | Plugins | Install JetBrains plugin…&lt;/em&gt;
You’ll need to restart the IDE after this completes.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-project&quot;&gt;Creating a project&lt;/h3&gt;

&lt;p&gt;It’s extremely easy to start using Kotlin for Android development. 
In this tutorial we’ll follow the warming up process with Android Studio.
If using Intellij IDEA with Android, the process is almost the same.&lt;/p&gt;

&lt;p&gt;First let’s create a new project. Choose &lt;strong&gt;Start a new Android Studio project&lt;/strong&gt; or &lt;strong&gt;File | New project&lt;/strong&gt;.
The following dialogs walk you through the process of new project creation. 
You need to name the project and choose which Android SDK version you have installed. Most options can be left with their default values, so you can press ‘Enter’ several times.&lt;/p&gt;

&lt;p&gt;Name the project:
&lt;img src=&quot;&quot; alt=&quot;Dialog 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Android Studio 3.0 offers an option to enable Kotlin support on this screen. You can check this option and skip the
“Configuring Kotlin in the project” step below.&lt;/p&gt;

&lt;p&gt;Choose the Android version:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Dialog 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Choose creating an activity that will be generated for you:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Dialog 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Name the activity:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Dialog 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Android Studio 3.0, you can choose to create the activity in Kotlin right away, so you can skip the “Converting
Java code to Kotlin” step. Earlier versions will create an activity in Java, and you can use the automated converter tool
to convert it.&lt;/p&gt;

&lt;p&gt;In general, the easiest way to start using Kotlin is to convert automatically Java activity into Kotlin one.
Please note that anytime instead of looking through documentation for a new way to express an old pattern, 
you can write it in Java, then copy-paste Java code into Kotlin file, and IntelliJ IDEA (or Android Studio) will suggest to convert it.&lt;/p&gt;

&lt;h4 id=&quot;converting-java-code-to-kotlin&quot;&gt;Converting Java code to Kotlin&lt;/h4&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity.java&lt;/code&gt; file. Then invoke action &lt;strong&gt;Convert Java File to Kotlin File&lt;/strong&gt;. You can do it by several ways.
The easiest one is to invoke &lt;a href=&quot;https://www.jetbrains.com/idea/help/navigating-to-action.html&quot;&gt;Find Action&lt;/a&gt; and start typing an action name (like in a screencast below). 
Alternatively you can call this option via the &lt;em&gt;Code | Convert Java File to Kotlin File&lt;/em&gt;  menu entry or by using the corresponding shortcut (you can find it at the menu entry).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Convert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the conversion you should have an activity written in Kotlin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Koltin-Activity&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;configuring-kotlin-in-the-project&quot;&gt;Configuring Kotlin in the project&lt;/h4&gt;

&lt;p&gt;If you start editing this file, Android Studio shows you a prompt that Kotlin is not configured, so you can configure it.
Alternatively, you can invoke the configuration by selecting Tools | Kotlin | Configure Kotlin in Project from the main menu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Config-Kotlin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You are then prompted for the version of Kotlin. Choose the latest available from the list of installed versions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Config-Kotlin-Details&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you configure Kotlin, build.gradle file for the application should be updated. 
Now you can see that &lt;em&gt;apply plugin: ‘kotlin-android’&lt;/em&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-stdlib&lt;/code&gt; dependency were added.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(For more details how to set up gradle for your project, please check &lt;a href=&quot;/docs/reference/using-gradle.html#targeting-android&quot;&gt;Using Gradle&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Sync-Project-With-Gradle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last thing to do is to sync the project. You can press ‘Sync Now’ in a prompt or invoke an action &lt;strong&gt;Sync Project with Gradle Files&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Sync-Project-With-Gradle-2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;building-and-publishing-the-kotlin-application-for-android&quot;&gt;Building and publishing the Kotlin application for Android&lt;/h3&gt;

&lt;p&gt;You are now ready to build the application and run it on an emulator or device.
This works in exactly the same way as in Java.
You can make a release of the application and sign it similarly to what you do for an Android application written in Java.&lt;/p&gt;

&lt;p&gt;Kotlin has a rather small runtime file size: the library is approximately  (as of ). This means Kotlin adds just a little to .apk file size.&lt;/p&gt;

&lt;p&gt;Kotlin compiler produces byte-code, thus there really is no difference in terms of look and feel of Kotlin applications versus those written in Java.&lt;/p&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Read about &lt;a href=&quot;android-plugin.html&quot;&gt;Kotlin Android Extensions plugin&lt;/a&gt; and &lt;a href=&quot;android-frameworks.html&quot;&gt;Android Frameworks Using Annotation Processing&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;If you want to learn different Kotlin features, try &lt;a href=&quot;koans.html&quot;&gt;Kotlin Koans&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Check out Google’s &lt;a href=&quot;https://developer.android.com/samples/index.html?language=kotlin&quot;&gt;sample projects written in Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Installing the Kotlin plugin</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/twitter-card.png" /></entry><entry><title type="html">Kotlin Koans</title><link href="http://localhost:4000/news/2018/05/15/kotlinlang-koans/" rel="alternate" type="text/html" title="Kotlin Koans" /><published>2018-05-15T00:00:00+09:00</published><updated>2018-05-15T00:00:00+09:00</updated><id>http://localhost:4000/news/2018/05/15/kotlinlang-koans</id><content type="html" xml:base="http://localhost:4000/news/2018/05/15/kotlinlang-koans/">&lt;p&gt;Kotlin Koans are a series of exercises to get you familiar with the Kotlin Syntax.
Each exercise is created as a failing unit test and your job is to make it pass.
You can play with &lt;a href=&quot;http://try.kotlinlang.org/koans&quot;&gt;Koans online&lt;/a&gt;, 
right &lt;a href=&quot;/docs/tutorials/edu-tools-learner.html&quot;&gt;inside IntelliJ IDEA or Android Studio&lt;/a&gt;, or by cloning the project on &lt;a href=&quot;https://github.com/Kotlin/kotlin-koans&quot;&gt;GitHub&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Download the Koans by cloning the project from GitHub&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git clone https://github.com/Kotlin/kotlin-koans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open up the project in IntelliJ IDEA or your favorite editor. Note: If IntelliJ IDEA prompts you to update the Kotlin library, just click yes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run a test. Make it pass&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Tests&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Repeat for all tests!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The repository has two branches, &lt;em&gt;master&lt;/em&gt; which contains the exercises for you to do and &lt;em&gt;resolutions&lt;/em&gt; which contains the resolved exercises. Make sure you don’t cheat!&lt;/p&gt;</content><author><name></name></author><summary type="html">Kotlin Koans are a series of exercises to get you familiar with the Kotlin Syntax. Each exercise is created as a failing unit test and your job is to make it pass. You can play with Koans online, right inside IntelliJ IDEA or Android Studio, or by cloning the project on GitHub:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/twitter-card.png" /></entry><entry><title type="html">Tutorials</title><link href="http://localhost:4000/news/2018/05/15/kotlinlang-index/" rel="alternate" type="text/html" title="Tutorials" /><published>2018-05-15T00:00:00+09:00</published><updated>2018-05-15T00:00:00+09:00</updated><id>http://localhost:4000/news/2018/05/15/kotlinlang-index</id><content type="html" xml:base="http://localhost:4000/news/2018/05/15/kotlinlang-index/">&lt;p&gt;A series of complete step-by-step tutorials to walk you through how to accomplish different tasks in Kotlin, from Getting Started to writing Android applications and more.
If you have a tutorial you’d like featured here, please let us know. We’ll be happy to host it and give credit!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you like a “hands-on” learning, try &lt;a href=&quot;http://try.kotlinlang.org/koans&quot;&gt;Kotlin Koans online&lt;/a&gt; to get familiar with Kotlin;&lt;/li&gt;
  &lt;li&gt;If you are using the command line compiler, start with &lt;a href=&quot;command-line.html&quot;&gt;Working with the Command Line Compiler&lt;/a&gt; and then work your way through the &lt;a href=&quot;koans.html&quot;&gt;Kotlin Koans&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;If you are using IntelliJ IDEA, start with &lt;a href=&quot;getting-started.html&quot;&gt;Getting Started&lt;/a&gt; and then work your way through the &lt;a href=&quot;koans.html&quot;&gt;Kotlin Koans&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">A series of complete step-by-step tutorials to walk you through how to accomplish different tasks in Kotlin, from Getting Started to writing Android applications and more. If you have a tutorial you’d like featured here, please let us know. We’ll be happy to host it and give credit!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/twitter-card.png" /></entry><entry><title type="html">Creating Web Applications with Http Servlets</title><link href="http://localhost:4000/news/2018/05/15/kotlinlang-httpservlets/" rel="alternate" type="text/html" title="Creating Web Applications with Http Servlets" /><published>2018-05-15T00:00:00+09:00</published><updated>2018-05-15T00:00:00+09:00</updated><id>http://localhost:4000/news/2018/05/15/kotlinlang-httpservlets</id><content type="html" xml:base="http://localhost:4000/news/2018/05/15/kotlinlang-httpservlets/">&lt;p&gt;Java EE Http servlets can be used from Kotlin much like any other Java library or framework. We’ll see
how to make a simple controller that returns “Hello, World!”.&lt;/p&gt;

&lt;h3 id=&quot;defining-the-project-and-dependencies&quot;&gt;Defining the project and dependencies&lt;/h3&gt;

&lt;p&gt;The main dependency required for using HTTP servlets is the JavaEE API:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'javax'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'javaee-api'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'7.0'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We also need to use the &lt;em&gt;war&lt;/em&gt; plugin that helps us generate the corresponding WAR artifacts for running/deploying&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;war&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To see the full Gradle script check out the source of the project on GitHub.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-home-controller&quot;&gt;Creating a Home Controller&lt;/h3&gt;

&lt;p&gt;Once we have the build script defined with the correct dependencies, we can now create a controller&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@WebServlet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServlet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;running-the-application&quot;&gt;Running the application&lt;/h3&gt;

&lt;p&gt;Using IntelliJ IDEA we can easily run and debug the application in any of the possible application servers defined such as Tomcat, Glassfish or WildFly. In this case we’re going to use Tomcat
which has previously &lt;a href=&quot;http://www.jetbrains.com/idea/webhelp/defining-application-servers-in-intellij-idea.html&quot;&gt;been defined as an application server in IntelliJ IDEA&lt;/a&gt;.
Note that application server support is only available in IntelliJ IDEA Ultimate.&lt;/p&gt;

&lt;p&gt;In order to run, we need the corresponding WAR(s) for deploying. We can generate these using the &lt;em&gt;war&lt;/em&gt; task in Gradle which can easily be executed via the Gradle tool window in IntelliJ IDEA.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Gradle Tasks&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, we can build it using the command line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gradle war
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next step is to create a Run Configuration in IntelliJ IDEA under Tomcat / Local which deploys the WAR and starts up Tomcat.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Run Config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we run the application (using this previous run configuration), and on successful deployment, we should be able to navigate to the browser with the correct url and see the response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Browser Run&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Java EE Http servlets can be used from Kotlin much like any other Java library or framework. We’ll see how to make a simple controller that returns “Hello, World!”.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/twitter-card.png" /></entry><entry><title type="html">Learning Kotlin with EduTools plugin</title><link href="http://localhost:4000/news/2018/05/15/kotlinlang-edu-tools-learner/" rel="alternate" type="text/html" title="Learning Kotlin with EduTools plugin" /><published>2018-05-15T00:00:00+09:00</published><updated>2018-05-15T00:00:00+09:00</updated><id>http://localhost:4000/news/2018/05/15/kotlinlang-edu-tools-learner</id><content type="html" xml:base="http://localhost:4000/news/2018/05/15/kotlinlang-edu-tools-learner/">&lt;p&gt;With &lt;a href=&quot;https://plugins.jetbrains.com/plugin/10081-edutools&quot;&gt;EduTools&lt;/a&gt; plugin you can learn and teach Kotlin through code practicing tasks. It is available both in &lt;a href=&quot;https://developer.android.com/studio&quot;&gt;Android Studio&lt;/a&gt; and &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;. This tutorial describes the interactive learning. If you want to use the EduTools plugin for teaching, read &lt;a href=&quot;/docs/tutorials/edu-tools-educator.html&quot;&gt;“Teaching Kotlin with EduTools plugin”&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;installing-edutools-plugin&quot;&gt;Installing EduTools plugin&lt;/h3&gt;

&lt;p&gt;Go to &lt;strong&gt;Preferences -&amp;gt; Plugins&lt;/strong&gt; (or &lt;strong&gt;Configure -&amp;gt; Plugins&lt;/strong&gt; from the &lt;strong&gt;Welcome Screen&lt;/strong&gt;), press &lt;strong&gt;Install JetBrains Plugin…&lt;/strong&gt; and search for EduTools plugin:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Installing EduTools plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When installed for the first time, the EduTools plugin asks if you’re a Learner or an Educator. Please choose &lt;strong&gt;Learner&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Learner role&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;joining-a-course&quot;&gt;Joining a course&lt;/h3&gt;

&lt;p&gt;To open the list of available courses, go to &lt;strong&gt;Browse Courses&lt;/strong&gt; on the &lt;strong&gt;Welcome Screen&lt;/strong&gt; or in the &lt;strong&gt;File Menu&lt;/strong&gt;. You can start with the &lt;a href=&quot;/docs/tutorials/koans.html&quot;&gt;Kotlin Koans&lt;/a&gt;, a series of exercises created to get you familiar with the Kotlin Syntax:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Join a course&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you have a course archive shared with you by your teacher or co-worker, use the &lt;strong&gt;Import Course&lt;/strong&gt; icon to open it. You can also log in to &lt;a href=&quot;https://stepik.org/&quot;&gt;Stepik&lt;/a&gt; with the corresponding link to see all the courses available to you on this MOOC platform.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;getting-around&quot;&gt;Getting around&lt;/h3&gt;

&lt;p&gt;To start the course, go to &lt;strong&gt;View -&amp;gt; Tool Windows -&amp;gt; Project&lt;/strong&gt;. You will find a course plan, the list of lessons. Every lesson has a set of tasks and code exercises you need to solve. Start with the very first one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Course plan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Every task has a description that you can read in the &lt;strong&gt;Task Description&lt;/strong&gt; panel (&lt;strong&gt;View -&amp;gt; Tool Windows -&amp;gt; Task Description&lt;/strong&gt;) and exercise code in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Task.kt&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Task details&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;p&gt;Now you’re ready to start learning. Read the first task description and the exercise code. You will find a placeholder in the exercise code which you need to complete to solve the task:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Solve a task&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you are ready, verify the task with the &lt;strong&gt;Check&lt;/strong&gt; icon at the top of &lt;strong&gt;Task Description&lt;/strong&gt; panel. If you passed, there will be the &lt;strong&gt;Congratulations!&lt;/strong&gt; message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Verify task&quot; /&gt;
&lt;img src=&quot;&quot; alt=&quot;Passed task&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go on to the next task with the &lt;strong&gt;Next&lt;/strong&gt; icon at the top of &lt;strong&gt;Task Description&lt;/strong&gt; panel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Next icon&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;carry-on-solving&quot;&gt;Carry on solving&lt;/h3&gt;

&lt;p&gt;Continue on with the code exercises and learn more about Kotlin. Even if you make a mistake, EduTools will help you if you get stuck. If the verification failed, you will get a message to help you to find the mistake:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Failed task&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to start from scratch with the task, use the &lt;strong&gt;Reset&lt;/strong&gt; icon at the top of &lt;strong&gt;Task Description&lt;/strong&gt; panel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Reset task&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or you can fill in the right answer with the &lt;strong&gt;Bulb&lt;/strong&gt; icon:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Get an answer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do not give up early! Make all the exercises green to finish the course:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Course progress&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">With EduTools plugin you can learn and teach Kotlin through code practicing tasks. It is available both in Android Studio and IntelliJ IDEA. This tutorial describes the interactive learning. If you want to use the EduTools plugin for teaching, read “Teaching Kotlin with EduTools plugin”.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/twitter-card.png" /></entry><entry><title type="html">Teaching Kotlin with EduTools plugin</title><link href="http://localhost:4000/news/2018/05/15/kotlinlang-edu-tools-educator/" rel="alternate" type="text/html" title="Teaching Kotlin with EduTools plugin" /><published>2018-05-15T00:00:00+09:00</published><updated>2018-05-15T00:00:00+09:00</updated><id>http://localhost:4000/news/2018/05/15/kotlinlang-edu-tools-educator</id><content type="html" xml:base="http://localhost:4000/news/2018/05/15/kotlinlang-edu-tools-educator/">&lt;p&gt;With &lt;a href=&quot;https://plugins.jetbrains.com/plugin/10081-edutools&quot;&gt;EduTools&lt;/a&gt; plugin you can learn and teach Kotlin through code practicing tasks. It is available both in &lt;a href=&quot;https://developer.android.com/studio&quot;&gt;Android Studio&lt;/a&gt; and &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;. This tutorial describes course creation for an educator. If you want to use EduTools plugin for learning, read &lt;a href=&quot;/docs/tutorials/edu-tools-learner.html&quot;&gt;“Learning Kotlin with EduTools plugin”&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;installing-edutools-plugin&quot;&gt;Installing EduTools plugin&lt;/h3&gt;

&lt;p&gt;Go to &lt;strong&gt;Preferences -&amp;gt; Plugins&lt;/strong&gt; (or &lt;strong&gt;Configure -&amp;gt; Plugins&lt;/strong&gt; from the &lt;strong&gt;Welcome Screen&lt;/strong&gt;), press &lt;strong&gt;Install JetBrains Plugin…&lt;/strong&gt; and search for EduTools plugin:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Installing EduTools plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When installed for the first time, EduTools plugin asks if you’re a Learner or an Educator. Please choose &lt;strong&gt;Educator&lt;/strong&gt; to enable course creation functionality:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Educator role&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you need to enable the course creation functionality later, you can go to &lt;strong&gt;Help Menu -&amp;gt; Enable Course Creator Features&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;creating-a-course&quot;&gt;Creating a course&lt;/h3&gt;

&lt;p&gt;To create a course, go to &lt;strong&gt;Create New Course&lt;/strong&gt; from the &lt;strong&gt;Welcome Screen&lt;/strong&gt; or in the &lt;strong&gt;File Menu&lt;/strong&gt;, fill in the title, author and description:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Creating a course&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Every Kotlin course created with EduTools is structured as a list of lessons. Each lesson contains tasks. A task has the following components: a description, a &lt;code class=&quot;highlighter-rouge&quot;&gt;Task.kt&lt;/code&gt; file with exercise code, a &lt;code class=&quot;highlighter-rouge&quot;&gt;Tests.kt&lt;/code&gt; file with the task check, and any other files needed for the learner to complete the task.&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;View -&amp;gt; Tool Windows -&amp;gt; Project&lt;/strong&gt; to look at the course structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Course structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add more lessons and tasks via the &lt;strong&gt;File Menu -&amp;gt; New&lt;/strong&gt;, drag-n-drop items to reorder them, or to rename items right-click them then in the menu use &lt;strong&gt;Refactor -&amp;gt; Rename&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Rename a task&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you need additional files for the task, just add them and decide whether you want to make them visible to learners or not with the &lt;strong&gt;Course Creator -&amp;gt; Make Visible to / Hide from Student&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;working-with-tasks&quot;&gt;Working with tasks&lt;/h3&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;Task.kt&lt;/code&gt; file to write the code you want for the exercise:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Task code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the code is ready, select a fragment you want a learner to fill in, invoke &lt;strong&gt;Add Answer Placeholder&lt;/strong&gt; command from the right-click menu and add the placeholder text and some hints to help the learner find the right solution:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Answer placeholder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to see how your task will be look to the learner, right-click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Task.kt&lt;/code&gt; file in the &lt;strong&gt;Project&lt;/strong&gt; tool window, and choose &lt;strong&gt;Course Creator -&amp;gt; Show Preview&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Task preview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now it’s time to add the task description. Click the &lt;strong&gt;Edit&lt;/strong&gt; icon at the top of &lt;strong&gt;Task Description&lt;/strong&gt; panel to switch to the editing mode:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Task description editing&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;&quot; alt=&quot;Task description preview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EduTools supports HTML and Markdown, so you can start editing with your preferred format, or even a combination of both.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;writing-tests&quot;&gt;Writing tests&lt;/h3&gt;

&lt;p&gt;You can write your custom tests using EduTools testing framework to automatically verify the learner’s solution. Every task has a &lt;code class=&quot;highlighter-rouge&quot;&gt;Tests.kt&lt;/code&gt; file already filled in with a test template that you will need to modify:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Test file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s replace &lt;code class=&quot;highlighter-rouge&quot;&gt;testSolution()&lt;/code&gt; function content with the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Write test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To check that your code passes your own test click the &lt;strong&gt;Check&lt;/strong&gt; icon at the top of &lt;strong&gt;Task Description&lt;/strong&gt; panel. If your code and test are correct, you will see the &lt;strong&gt;“Congratulations!”&lt;/strong&gt; text:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Write test&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;course-preview&quot;&gt;Course preview&lt;/h3&gt;

&lt;p&gt;When you have finished creating your course, it’s a good idea to view your course from a learner’s perspective and test it. Right-click on the course view and go to &lt;strong&gt;Course Creator -&amp;gt; Create Course Preview&lt;/strong&gt; to open your course in learner mode:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Course preview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So you can solve tasks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Course preview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And verify them:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Course preview&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;course-sharing&quot;&gt;Course sharing&lt;/h3&gt;

&lt;p&gt;You can share your learning materials publicly or privately with your students or co-workers on &lt;a href=&quot;https://stepik.org/&quot;&gt;Stepik&lt;/a&gt;, a learning management and MOOC platform. Or you can save your course as an archive file.&lt;/p&gt;

&lt;p&gt;To save your course as a zip file, go to &lt;strong&gt;Course Creator -&amp;gt; Generate Course Archive&lt;/strong&gt; action. The generated archive can be opened via the &lt;strong&gt;Browse Courses&lt;/strong&gt; available from the &lt;strong&gt;Welcome Screen&lt;/strong&gt; and in the &lt;strong&gt;File Menu&lt;/strong&gt; with the &lt;strong&gt;Import Course&lt;/strong&gt; icon:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Import course&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Import course&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you have an account on &lt;a href=&quot;https://stepik.org/&quot;&gt;Stepik&lt;/a&gt;, you can easily upload your course there, update it anytime you need, and &lt;a href=&quot;https://blog.jetbrains.com/pycharm/2017/06/integration-with-stepik-for-educators/&quot;&gt;share publicly or privately&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">With EduTools plugin you can learn and teach Kotlin through code practicing tasks. It is available both in Android Studio and IntelliJ IDEA. This tutorial describes course creation for an educator. If you want to use EduTools plugin for learning, read “Learning Kotlin with EduTools plugin”.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/twitter-card.png" /></entry><entry><title type="html">Creating Kotlin/JavaScript library with IntelliJ IDEA</title><link href="http://localhost:4000/news/2018/05/15/kotlinlang-create-library-js/" rel="alternate" type="text/html" title="Creating Kotlin/JavaScript library with IntelliJ IDEA" /><published>2018-05-15T00:00:00+09:00</published><updated>2018-05-15T00:00:00+09:00</updated><id>http://localhost:4000/news/2018/05/15/kotlinlang-create-library-js</id><content type="html" xml:base="http://localhost:4000/news/2018/05/15/kotlinlang-create-library-js/">&lt;h3 id=&quot;setting-up-the-environment&quot;&gt;Setting up the environment&lt;/h3&gt;
&lt;p&gt;The tutorial works with IntelliJ IDEA Community Edition as well as IntelliJ IDEA Ultimate.
For best experience developing Kotlin/JavaScript applications, we recommend using IntelliJ IDEA Ultimate,
which includes the JavaScript debugger and other JavaScript support features.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a New Kotlin/JavaScript Project.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Kotlin New Project&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Specify the project name (e.g. sample-library), and click the &lt;em&gt;Create&lt;/em&gt; for Kotlin JS library.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Kotlin New Project&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select “Use library from plugin”. Of cource, you can choose copy library to some directory in your project, if you prefer.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Kotlin New Project&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click the &lt;em&gt;Finish&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Kotlin New Project&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We should now have the new project created and the following folder structure&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Kotlin New Project&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Let’s create a new Kotlin file under the source folder. It can be named anything. In our case we will call it &lt;em&gt;library&lt;/em&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.sample&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using &lt;em&gt;File &amp;gt; Settings&lt;/em&gt;, check compiler settings for Kotlin compiler. Disable “Copy library runtime files”.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Kotlin New Project&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Click the &lt;em&gt;Build &amp;gt; Make Project&lt;/em&gt;, and check that out/production directory contains two new files.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Kotlin New Project&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open Project Structure Dialog (&lt;em&gt;File &amp;gt; Project Structure&lt;/em&gt;), select &lt;em&gt;Artifacts&lt;/em&gt; and add new empty artifact.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Kotlin New Project&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Choose name for artifact and add module compilation output to the content of newly created artifact.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Kotlin New Project&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click the &lt;em&gt;Build &amp;gt; Build Artifacts&lt;/em&gt;, and the resulting artifact is our library, which can be distributed.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Kotlin New Project&quot; /&gt;&lt;/p&gt;

  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Setting up the environment The tutorial works with IntelliJ IDEA Community Edition as well as IntelliJ IDEA Ultimate. For best experience developing Kotlin/JavaScript applications, we recommend using IntelliJ IDEA Ultimate, which includes the JavaScript debugger and other JavaScript support features.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/twitter-card.png" /></entry></feed>